<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	name="twup"
	backgroundAlpha="0.9"
	backgroundColor="#333333"
	showStatusBar="false" 
	applicationComplete="initializeApplication()"
	width="300" height="400"
	>
	
	<fx:Script>
		<![CDATA[
			import flash.data.EncryptedLocalStore;
			import flash.filesystem.File;
			import flash.utils.ByteArray;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.CloseEvent;
			
			private var _credentials:Object;
			private var _file:File;
			private var _message:String;
			
			private function initializeApplication():void {
				
				systemManager.stage.addEventListener(NativeDragEvent.NATIVE_DRAG_COMPLETE, dragCompleteHandler);
				systemManager.stage.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, dragEnterHandler);
				systemManager.stage.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dragDropHandler);
				
				setCurrentState("normal");
				if(!hasCredentials()) {
					setCurrentState("form");
					addFormEventListeners();
				} else {
					retreiveCredentials();
				}
			}
			
			private function addFormEventListeners():void {
				loginBtn.addEventListener(MouseEvent.CLICK, saveCredentialsHandler);
			}
			
			private function saveCredentialsHandler(event:MouseEvent = null):void {
				EncryptedLocalStore.reset();
				
				var b:ByteArray =  new ByteArray();
				b.writeUTFBytes(usr.text);
				EncryptedLocalStore.setItem("username", b);
				
				b = new ByteArray();
				b.writeUTFBytes(pwd.text);
				EncryptedLocalStore.setItem("password", b);
				
				usr.text = "";
				pwd.text = "";
				setCurrentState("normal");
				retreiveCredentials();
			}

			private function hasCredentials():Boolean {
				try {
					var u:ByteArray = EncryptedLocalStore.getItem("username");
					var p:ByteArray = EncryptedLocalStore.getItem("password");
					return u != null && p != null;
				} catch (error:Error) { }
				return false;
			}
			
			private function retreiveCredentials():void {
				try {
					var u:ByteArray = EncryptedLocalStore.getItem("username");
					var p:ByteArray = EncryptedLocalStore.getItem("password");	
					_credentials = {};
					_credentials.username = u.readUTFBytes(u.length);
					_credentials.password = p.readUTFBytes(p.length);
				} catch (error:Error) { }
			}
			
			private function dragEnterHandler(event:NativeDragEvent):void {
				NativeDragManager.acceptDragDrop(stage);
			}
			
			private function dragDropHandler(event:NativeDragEvent):void {
				var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				for each(var f:File in files) {
					switch(f.extension) {
						case "GIF":
						case "gif":
						case "JPG":
						case "jpg":
						case "JPEG":
						case "jpeg":
						case "PNG":
						case "png":
							displayImage(f.nativePath);
							break;
						default:
							Alert.show("Unsupported file format", "Error");
							break;
					}
				} 
			}
			
			private function dragCompleteHandler(event:NativeDragEvent):void {
				// copyToDesktop();
			}
			
			private function displayImage(path:String):void {
				_file = File.applicationDirectory.resolvePath(path);
				if(_file.exists) {
					setCurrentState("edit");
					_file.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, fileHttpResponseStatusHandler);
					_file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, fileUploadCompleteDataHandler);
					_file.addEventListener(ProgressEvent.PROGRESS, fileProgressHandler);
					_file.addEventListener(IOErrorEvent.IO_ERROR,  fileIoErrorHandler);
					if(_file.size >= 4194304) {
//						Add a new state
						msg.text = "";
						setCurrentState("normal");
						lbl.text = "Sorry, the file is too big.";
					} else {					
						img.load(_file.url); 
					}
				}			
				
			}
			
			private function uploadImage(file:File):void {
				setCurrentState("normal");
				lbl.text = "uploading...";

				var u:String = (_message.length > 1) ? u = "http://twitpic.com/api/uploadAndPost" : u = "http://twitpic.com/api/upload";
				
				var r:URLRequest = new URLRequest(u);
				r.contentType = "multipart/form-data";
				r.method = URLRequestMethod.POST;
				
				var v:URLVariables = new URLVariables();
				v.username = _credentials.username;
				v.password = _credentials.password;
				
				if(_message.length > 1)
					v.message = _message;
				
				r.data = v;
				file.upload(r, "media");
			}
			
			private function uploadClickHandler(event:MouseEvent):void {
				(msg.text == null || msg.text.length < 1) ? _message = "" : _message = msg.text;
				event.currentTarget.removeEventListener(event.type, arguments.callee);
				txtCount.text = "";
				uploadImage(_file);
			}
			
			private function cancelClickHandler(event:MouseEvent):void {
				msg.text = "";
				txtCount.text = "";
				setCurrentState("normal");
			}
			
			private function imageOpenHandler(event:Event = null):void  {
				img.alpha = 0;
			}
			
			private function imageInitHandler(event:Event = null):void {
				var f:Fade = new Fade(img);
				f.alphaFrom = 0;
				f.alphaTo = 1;
				f.play();
			}
			
			private function msgChangeHandler(event:Event = null):void {
				var count:int = 140 - msg.text.length;
				txtCount.text = count.toString();
			}
			
			private function fileIoErrorHandler(event:IOErrorEvent):void {
				Alert.show(event.text, "Error");
			}
			
			private function fileHttpResponseStatusHandler(event:HTTPStatusEvent):void {
				// trace("http response status : ", event.status);
			}
			
			private function fileProgressHandler(event:ProgressEvent):void {
				var p:Number = Math.floor((event.bytesLoaded / event.bytesTotal) * 100);
				lbl.text = p.toString() + " % uploaded...";
			}
			
			private function fileUploadCompleteDataHandler(event:DataEvent = null):void {
				var rsp:XML = new XML(event.data);
				if(rsp.@stat == "ok" || rsp.@status == "ok" ) {
					setCurrentState("normal");
					lbl.text = "Pic uploaded to " + rsp.mediaurl;
					Clipboard.generalClipboard.setData(
						ClipboardFormats.TEXT_FORMAT, 
						rsp.mediaurl, true);
					Alert.show("Twitpic url copied to your clipboard", 
						"Success", Alert.OK, this, 
						alertCloseHandler);
				} else if(rsp.@status == "fail") {
					Alert.show(rsp.err.code + " : " + rsp.err.message, 
						"Error", Alert.OK, this, 
						alertCloseHandler);
				}
			}
			
			private function alertCloseHandler(event:CloseEvent = null):void {
				setCurrentState("normal");
				lbl.text = "Drag a pic to upload";
				
			}
		]]>
	</fx:Script>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "ps.twup.components.*";
		
		mx|Alert {
			text-align: center;
			
		}
	</fx:Style>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="form" />
		<s:State name="edit" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="*" toState="normal">
			<s:Sequence>
				<s:Fade target="{editGrp}" />
				<s:RemoveAction target="{editGrp}" />
				<s:AddAction  target="{lbl}" />
				<s:Move xFrom="-400" target="{lbl}" duration="400" />
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="*" toState="form">
			<s:Sequence>
				<s:Fade duration="500" target="{lbl}" />
				<s:RemoveAction  target="{lbl}" />	
				<s:AddAction target="{loginGrp}" />
				<s:Move xFrom="400" target="{loginGrp}" duration="400" />
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="*" toState="edit">
			<s:Sequence>
				<s:AddAction target="{editGrp}" />
				<s:Move xFrom="400" target="{editGrp}" duration="400" />
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
	<s:Group id="ctn"
		width="100%" height="100%"
		clipAndEnableScrolling="true"
		horizontalCenter="0"
		verticalCenter="0"
		>
		<s:Label id="lbl"
			color="#666666" 
			text="Drag a pic to upload"
			textAlign="center" 
			fontWeight="bold" 
			includeIn="normal"
			verticalCenter="0"
			width="100%" 
			/>
		
		<s:VGroup id="loginGrp" 
			includeIn="form"
			horizontalAlign="center"
			verticalAlign="middle"
			verticalCenter="0"
			width="100%">	
			<s:Label text="Enter your twitter crendials and login" 
				fontSize="16"
				fontWeight="bold" />
			<s:Label text="Username : "  />
			<s:TextInput id="usr" />
			<s:Label text="Password : "  />
			<s:TextInput id="pwd" displayAsPassword="true" />
			<s:Button label="Ok" id="loginBtn" />
			
		</s:VGroup>
		
		<s:VGroup id="editGrp" includeIn="edit" 
			width="100%" 
			horizontalAlign="center"
			verticalCenter="0">
			<mx:Image id="img" 
				horizontalAlign="center" 
				verticalAlign="middle" 
				width="250" height="187"
				maxWidth="250" maxHeight="200"
				init="imageInitHandler()"
				open="imageOpenHandler()"
				/>
			<s:TextArea id="msg" width="80%" 
				height="50"
				horizontalScrollPolicy="off"
				verticalScrollPolicy="off"
				maxChars="140" change="msgChangeHandler()" />
			<s:Label id="txtCount" width="80%" 
				textAlign="right" text="140" />
			<s:HGroup horizontalAlign="center" 
				width="100%" height="100%">
				<s:Button label="Ok" 
					click="uploadClickHandler(event)" />
				<s:Button label="Cancel"
					click="cancelClickHandler(event)" />
			</s:HGroup>
		</s:VGroup>			
	</s:Group>
	
</s:WindowedApplication>